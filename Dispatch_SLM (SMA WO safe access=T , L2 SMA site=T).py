# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


class TestDispatchSLMSMAWOsafeaccessTL2SMAsiteT():
    def setup_method(self, method):
        self.driver = webdriver.Chrome("C:\\driver\\chromedriver.exe")
        self.vars = {}
        self.driver.get("https://brinksreset.oktapreview.com/")
        self.driver.set_window_size(1382, 744)
        self.driver.find_element(By.ID, "form1").click()
        self.driver.find_element(By.XPATH, "//input[@autocomplete='username']").clear()
        self.driver.find_element(By.XPATH, "//input[@autocomplete='username']").send_keys("b.khlifi@brinks.fr")
        self.driver.find_element(By.ID, "idp-discovery-submit").click()
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.ID, "form6").click()
        self.driver.find_element(By.NAME, "password").clear()
        self.driver.find_element(By.NAME, "password").send_keys("Brinks2021@")
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.XPATH, "/html/body/div[2]/div/main/div[2]/div/div/form/div[2]/input").click()
        self.driver.find_element(By.XPATH,
                                 "/html/body/div[2]/div/section/main/div/section/section/section/section/section/div[5]/a/article").click()

        # Opens a new tab
        self.driver.execute_script("window.open()")
        # Switch to the newly opened tab
        self.driver.switch_to.window(self.driver.window_handles[0])



    def test_dispatchSLMSMAWOsafeaccessTL2SMAsiteT(self):
        self.driver.get("https://brinksbpotest.service-now.com/nav_to.do?uri=%2Fhome.do")
        self.driver.set_window_size(1262, 792)
        self.driver.find_element(By.CSS_SELECTOR, "#e819de791b778c101f1699f4bd4bcb0a .sn-widget-list-title").click()
        self.driver.switch_to.frame(0)
        self.driver.find_element(By.ID, "sys_display.sn_customerservice_customer_interaction.u_device").click()
        self.driver.find_element(By.ID, "sys_display.sn_customerservice_customer_interaction.u_device").send_keys(
            "BPAURA G3GW")
        self.driver.find_element(By.CSS_SELECTOR, ".vsplit:nth-child(1)").click()
        self.driver.find_element(By.ID, "sn_customerservice_customer_interaction.u_subcategory").click()
        dropdown = self.driver.find_element(By.ID, "sn_customerservice_customer_interaction.u_subcategory")
        dropdown.find_element(By.XPATH, "//option[. = 'TT - Network']").click()
        self.driver.find_element(By.ID, "sn_customerservice_customer_interaction.u_impact").click()
        dropdown = self.driver.find_element(By.ID, "sn_customerservice_customer_interaction.u_impact")
        dropdown.find_element(By.XPATH, "//option[. = '1 - Out of Service']").click()
        self.driver.find_element(By.ID, "sn_customerservice_customer_interaction.u_subcategory").click()
        dropdown = self.driver.find_element(By.ID, "sn_customerservice_customer_interaction.u_subcategory")
        dropdown.find_element(By.XPATH, "//option[. = 'TT - Hardware']").click()
        element = self.driver.find_element(By.ID, "sys_display.sn_customerservice_customer_interaction.contact")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element, 0, 0).perform()
        self.driver.find_element(By.ID, "sn_customerservice_customer_interaction.u_component").click()
        dropdown = self.driver.find_element(By.ID, "sn_customerservice_customer_interaction.u_component")
        dropdown.find_element(By.XPATH, "//option[. = 'Card reader']").click()
        self.driver.find_element(By.ID, "sn_customerservice_customer_interaction.short_description").click()
        self.driver.find_element(By.ID, "sn_customerservice_customer_interaction.short_description").send_keys(
            "test_auto_slm")
        self.driver.find_element(By.ID, "sn_customerservice_customer_interaction.u_description").send_keys(
            "test_auto_slm")
        self.driver.find_element(By.ID, "sysverb_insert_bottom").click()
        self.driver.find_element(By.ID, "complete_call_bottom").click()
        self.driver.find_element(By.ID, "accept").click()
        self.driver.find_element(By.ID, "dispatch").click()
        self.driver.find_element(By.ID, "vendor_type").click()
        dropdown = self.driver.find_element(By.ID, "vendor_type")
        dropdown.find_element(By.XPATH, "//option[. = 'SLM']").click()
        self.driver.find_element(By.ID, "esc_reason").click()
        dropdown = self.driver.find_element(By.ID, "esc_reason")
        dropdown.find_element(By.XPATH, "//option[. = 'Direct to SLM']").click()
        self.driver.find_element(By.ID, "ok_button").click()
        WebDriverWait(self.driver, 50).until(
            expected_conditions.presence_of_element_located((By.LINK_TEXT, "SLM: NCR (CR_SLM)")))
        self.driver.find_element(By.XPATH,
                                 "//a[@href=\'sn_customerservice_dispatch_task.do?sys_id=21a96190dbf7bcd0aedeccd4059619a9&sysparm_view=case&sysparm_record_target=sn_customerservice_task&sysparm_record_row=1&sysparm_record_list=parent%3D4f99e950dbf7bcd0aedeccd4059619df%5EORDERBYDESCsys_created_on&sysparm_record_rows=1\']").click()
        self.driver.find_element(By.XPATH, "//a[contains(.,\'Open Record\')]").click()
        self.driver.find_element(By.ID, "sn_customerservice_dispatch_task.state").click()
        dropdown = self.driver.find_element(By.ID, "sn_customerservice_dispatch_task.state")
        dropdown.find_element(By.XPATH, "//option[. = 'Resolved']").click()
        self.driver.find_element(By.CSS_SELECTOR,
                                 ".date-calendar > .input-group #sn_customerservice_dispatch_task\\.u_onsite_time\\.ui_policy_sensitive > .icon-calendar").click()
        self.driver.find_element(By.ID, "GwtDateTimePicker_ok").click()
        self.driver.find_element(By.CSS_SELECTOR,
                                 ".date-calendar > .input-group #sn_customerservice_dispatch_task\\.u_resolution_time\\.ui_policy_sensitive > .icon-calendar").click()
        element = self.driver.find_element(By.CSS_SELECTOR,
                                           ".date-calendar > .input-group #sn_customerservice_dispatch_task\\.u_resolution_time\\.ui_policy_sensitive > .icon-calendar")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element, 0, 0).perform()
        self.driver.find_element(By.ID, "GwtDateTimePicker_ok").click()
        self.driver.find_element(By.ID, "sysverb_update_bottom").click()


    def tearDown_method(self, method):
        self.driver.quit()

